library(tidyverse)
library(ggplot2)
library(lubridate)
parkinformations <- readRDS("~/ispark-parkbilgileri.RDS") %>% select(-c(Distance,BosKapasite))
parkinformations <- readRDS("~/ispark-parkbilgileri.RDS")
---
title: "Exploratory Data Analysis of ISPARK Dataset"
output: html_document
---
```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = FALSE)
library(tidyverse)
library(ggplot2)
library(lubridate)
parkinformations <- readRDS("ispark-parkbilgileri.RDS") %>% select(-c(Distance,BosKapasite))
parkcapacitylog <- readRDS("parkcapacitylog.RDS")
```
# Dataset
We have two tables in our dataset. First table contains informations about ISPARK park areas. Second table contains hourly percentage of occupancies of these park areas between 19 November 2020 and 2 December 2020. We have collected this datas by using IBB OpenData API. You can also access this API from [here.](https://api.ibb.gov.tr/ispark/Park)
### Park Informations Table
Park Informations table contains 9 variables and 577 observations. Descriptions of columns is below.
* `ParkID`: Unique identifier of the parking place
* `ParkAdi`: Name of the parking place
* `Latitude`: Latitude of the parking place
* `Longitude`: Longitude of the parking place
* `Kapasitesi`: Full capacity of the parking space when it is empty
* `ParkTipi`: Types of parking ways of the parking space; Yolüstü – Acik-- Kapali
* `Ilce`: District which parking space in
* `UcretsizParklanmaDk`:Free parking duration in minutes
* `AylıkAbonelikUcreti`:Monthly subscription fee (₺)
```{r parkinfosum}
summary(parkinformations)
```
### Hourly Percentage of Occupancy Table
Hourly Percentage of Occupancy table contains 4 variables and `r nrow(parkcapacitylog)` observations. Descriptions of columns is below.
* `ParkID`: Unique identifier of the parking place
* `ParkAdi`: Name of the parking place
* `DolulukYuzdesi`: Percentage of occupancy
* `OlcumZamanı`: Observation date and time
```{r parkcapsum}
summary(parkcapacitylog)
```
# Missing Values
We don't have any missing values in our tables as you can see below. We think this is because we use API data that is cleaned and submitted by others.
Missing values in Park Informations table by variable
```{r}
sapply(parkinformations, function(x) sum(is.na(x)))
```
Missing values in Hourly Percentage of Occupancy table by variable
```{r}
sapply(parkcapacitylog, function(x) sum(is.na(x)))
```
```{r}
parkinformations %>% filter(ParkTipi %in% c("AÇIK OTOPARK","KAPALI OTOPARK","YOL ÜSTÜ")) %>% ggplot(., aes(ParkTipi,AylıkAbonelikÜcreti)) +
geom_boxplot()
```
```{r}
park_capacity_hourly <- parkcapacitylog %>%
group_by(hour = lubridate::hour(OlcumZamanı)) %>%
summarize( avd_doluluk_orani =mean(DolulukYuzdesi))
ggplot(park_capacity_hourly, aes(hour, avd_doluluk_orani)) +
geom_line()
```
```{r}
mergedtable <- merge(x = parkcapacitylog, y = parkinformations, by = "ParkID", all.x = TRUE)
merged_park_capacity_hourly <- mergedtable %>%
group_by(hour = lubridate::hour(OlcumZamanı), ParkTipi) %>%
summarize( avd_doluluk_orani =mean(DolulukYuzdesi)) %>% filter(ParkTipi != "NA")
ggplot(merged_park_capacity_hourly, aes(hour, avd_doluluk_orani, color=ParkTipi)) +
geom_line()
```
```{r message=FALSE, warning=FALSE}
parkinfo_tip <- parkinformations %>% group_by(ParkTipi) %>% summarize("Toplam Kapasite"=sum(Kapasitesi), "Ortalama Kapatise"=mean(Kapasitesi), "Ortalama Ücretsiz Park Süresi" = mean(UcretsizParklanmaDk), "Ortalama Aylık Ücret" = mean(AylıkAbonelikÜcreti))
parktipi_adet <- parkinformations %>% group_by(ParkTipi) %>% count(ParkTipi, sort = TRUE)
#parkinfo_tip %>% left_join(parktipi_adet)
parktipi_adet %>% left_join(parkinfo_tip) %>% rename("Park Adeti"=n)
```
```{r}
parktipi_adet <- parkinformations %>% group_by(ParkTipi) %>% count(ParkTipi, sort = TRUE)
```
```{r}
ggplot(parkinformations, aes(x=AylıkAbonelikÜcreti, fill=ParkTipi))+
geom_histogram(bins = 6, binwidth = 100)+
l
---
title: "Exploratory Data Analysis of ISPARK Dataset"
output: html_document
---
```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = FALSE)
library(tidyverse)
library(ggplot2)
library(lubridate)
parkinformations <- readRDS("ispark-parkbilgileri.RDS") %>% select(-c(Distance,BosKapasite))
parkcapacitylog <- readRDS("parkcapacitylog.RDS")
```
# Dataset
We have two tables in our dataset. First table contains informations about ISPARK park areas. Second table contains hourly percentage of occupancies of these park areas between 19 November 2020 and 2 December 2020. We have collected this datas by using IBB OpenData API. You can also access this API from [here.](https://api.ibb.gov.tr/ispark/Park)
### Park Informations Table
Park Informations table contains 9 variables and 577 observations. Descriptions of columns is below.
* `ParkID`: Unique identifier of the parking place
* `ParkAdi`: Name of the parking place
* `Latitude`: Latitude of the parking place
* `Longitude`: Longitude of the parking place
* `Kapasitesi`: Full capacity of the parking space when it is empty
* `ParkTipi`: Types of parking ways of the parking space; Yolüstü – Acik-- Kapali
* `Ilce`: District which parking space in
* `UcretsizParklanmaDk`:Free parking duration in minutes
* `AylıkAbonelikUcreti`:Monthly subscription fee (₺)
```{r parkinfosum}
summary(parkinformations)
```
### Hourly Percentage of Occupancy Table
Hourly Percentage of Occupancy table contains 4 variables and `r nrow(parkcapacitylog)` observations. Descriptions of columns is below.
* `ParkID`: Unique identifier of the parking place
* `ParkAdi`: Name of the parking place
* `DolulukYuzdesi`: Percentage of occupancy
* `OlcumZamanı`: Observation date and time
```{r parkcapsum}
summary(parkcapacitylog)
```
# Missing Values
We don't have any missing values in our tables as you can see below. We think this is because we use API data that is cleaned and submitted by others.
Missing values in Park Informations table by variable
```{r}
sapply(parkinformations, function(x) sum(is.na(x)))
```
Missing values in Hourly Percentage of Occupancy table by variable
```{r}
sapply(parkcapacitylog, function(x) sum(is.na(x)))
```
```{r}
parkinformations %>% filter(ParkTipi %in% c("AÇIK OTOPARK","KAPALI OTOPARK","YOL ÜSTÜ")) %>% ggplot(., aes(ParkTipi,AylıkAbonelikÜcreti)) +
geom_boxplot()
```
```{r}
park_capacity_hourly <- parkcapacitylog %>%
group_by(hour = lubridate::hour(OlcumZamanı)) %>%
summarize( avd_doluluk_orani =mean(DolulukYuzdesi))
ggplot(park_capacity_hourly, aes(hour, avd_doluluk_orani)) +
geom_line()
```
```{r}
mergedtable <- merge(x = parkcapacitylog, y = parkinformations, by = "ParkID", all.x = TRUE)
merged_park_capacity_hourly <- mergedtable %>%
group_by(hour = lubridate::hour(OlcumZamanı), ParkTipi) %>%
summarize( avd_doluluk_orani =mean(DolulukYuzdesi)) %>% filter(ParkTipi != "NA")
ggplot(merged_park_capacity_hourly, aes(hour, avd_doluluk_orani, color=ParkTipi)) +
geom_line()
```
```{r message=FALSE, warning=FALSE}
parkinfo_tip <- parkinformations %>% group_by(ParkTipi) %>% summarize("Toplam Kapasite"=sum(Kapasitesi), "Ortalama Kapatise"=mean(Kapasitesi), "Ortalama Ücretsiz Park Süresi" = mean(UcretsizParklanmaDk), "Ortalama Aylık Ücret" = mean(AylıkAbonelikÜcreti))
parktipi_adet <- parkinformations %>% group_by(ParkTipi) %>% count(ParkTipi, sort = TRUE)
#parkinfo_tip %>% left_join(parktipi_adet)
parktipi_adet %>% left_join(parkinfo_tip) %>% rename("Park Adeti"=n)
```
```{r}
parktipi_adet <- parkinformations %>% group_by(ParkTipi) %>% count(ParkTipi, sort = TRUE)
```
```{r}
ggplot(parkinformations, aes(x=AylıkAbonelikÜcreti, fill=ParkTipi))+
geom_histogram(bins = 6, binwidth = 100)+
labs(title="Price Histogram",x ="Price", y = "Count")
```
View(parkcapacitylog)
merged_park_capacity_daily <- mergedtable %>%
group_by(date = lubridate::date(OlcumZamani), ParkTipi) %>%
summarize( avd_doluluk_orani =mean(DolulukYuzdesi))
library(tidyverse)
library(lubridate)
library(dplyr)
library(ggplot2)
library(jsonlite)
#shinynotlar
#kullanici araç tipini seçsin, lokasyonunu seçsin ve fiyat araligini seçsin
#seçime göre kullaniciya en yakin aracina uygun fiyata göre siralanmis parklar gelsin + parkin ücretsiz dk'si varsa gösterilsin
#kullanici arama yaptigi ana en yakin andaki doluluk orani gösterilsin
#analiznotlar
#en çok otopark olan 10 ilçe - line 37
#en çok otopark olan otopark tipine göre 5 ilçe - line 41
#otopark tiplerinin boxplotlari - line 59 - 65
#otopark tipi sum ve avg. degerleri - line 30
#otopark tipi sayilari - line 34
#her otopark tipinin en ucuz ve en pahali fiyatlari & parklari neler - line 68
#otopark tipine göre günlük ve saatlik bazda doluluk orani line graph'i
parkcapacity <- readRDS("C:/Users/cbilg/Documents/R/GroupAssignment_bakRiz/parkcapacitylog.RDS")
parkinfo <- readRDS("C:/Users/cbilg/Documents/R/GroupAssignment_bakRiz/ispark-parkbilgileri.RDS")
summary(parkinfo)
#yeni tablolar
parkinfo_ilce_tip <- parkinfo %>% group_by(Ilce, ParkTipi) %>% summarize(tot_kapasitesi=sum(Kapasitesi), avg_kapasitesi=mean(Kapasitesi), avg_ucretsiz = mean(UcretsizParklanmaDk), avg_aylikucret = mean(AylikAbonelikÜcreti))
parkinfo_tip <- parkinfo %>% group_by(ParkTipi) %>% summarize(tot_kapasitesi=sum(Kapasitesi), avg_kapasitesi=mean(Kapasitesi), avg_ucretsiz = mean(UcretsizParklanmaDk), avg_aylikucret = mean(AylikAbonelikÜcreti))
#adetler
#minibuspark sadece bir yerde var
parktipi_adet <- parkinfo %>% group_by(ParkTipi) %>% count(ParkTipi, sort = TRUE)
parkilce_adet <- parkinfo %>% group_by(Ilce) %>% count(Ilce) %>% arrange(desc(n))
#en çok park olan 10 ilçe - ANALIZ
parkilceadettop10 <- parkilce_adet %>% top_n(10, n)
#en çok otopark olan otopark tipine göre 5 ilçe - OLMADI
parkinfo %>% filter(Ilce %in% c(parkilceadettop10$Ilce)) %>% group_by(Ilce, ParkTipi) %>% count(ParkTipi)
#tablolar
#1
#av. kapasite vs. av.aylik ücret, park tipine göre scatter
#açik otoparkta kapasitesi çok yüksek olup avg price çok düsük olan outlier??
#yol üstü avg price'i neye göre degisiyor ilçeye göre mi?
ggplot(parkinfo_ilce_tip, aes(x=avg_kapasitesi, y=avg_aylikucret, color=ParkTipi))+
geom_point()
#2 buradan birseycikmadi
parkinfo_yolustu <- parkinfo %>% group_by(Ilce, ParkTipi) %>% filter(ParkTipi=="YOL ÜSTÜ") %>%
summarize(tot_kapasitesi=sum(Kapasitesi), avg_kapasitesi=mean(Kapasitesi), avg_ucretsiz = mean(UcretsizParklanmaDk), avg_aylikucret = mean(AylikAbonelikÜcreti)) %>%
arrange(desc(avg_aylikucret))
#tip&ücrete göre boxplot - ANALIZ
ggplot(parkinfo, aes(ParkTipi,AylikAbonelikÜcreti)) +
geom_boxplot()
#tip&kapasite göre boxplot -ANALIZ
ggplot(parkinfo, aes(ParkTipi,Kapasitesi)) +
geom_boxplot()
#her otopark tipinin en ucuz ve en pahali fiyatlari & parklari neler - olmadi
parkinfo %>% group_by(ParkTipi) %>% transmute(ParkTipi, ParkAdi, min_fiyat = min(AylikAbonelikÜcreti), max_fiyat = max(AylikAbonelikÜcreti))
#saatlik kapasite
park_capacity_hourly <- parkcapacity %>%
group_by(hour = lubridate::hour(OlcumZamani)) %>%
summarize( avd_doluluk_orani =mean(DolulukYuzdesi))
ggplot(park_capacity_hourly, aes(hour, avd_doluluk_orani)) +
geom_line()
#merged table
mergedtable <- merge(x = parkcapacity, y = parkinfo, by = "ParkID", all.x = TRUE)
merged_park_capacity_hourly <- mergedtable %>%
group_by(hour = lubridate::hour(OlcumZamani), ParkTipi) %>%
summarize( avd_doluluk_orani =mean(DolulukYuzdesi))
ggplot(merged_park_capacity_hourly, aes(hour, avd_doluluk_orani, color=ParkTipi)) +
geom_line()
#park ücretinin frekans tablosu
ggplot(parkinfo, aes(x=AylikAbonelikÜcreti, fill=ParkTipi))+
geom_histogram(bins = 6, binwidth = 100)+
labs(title="Price Histogram",x ="Price", y = "Count")
#merged table 2
merged_park_capacity_daily <- mergedtable %>%
group_by(date = lubridate::date(OlcumZamani), ParkTipi) %>%
summarize( avd_doluluk_orani =mean(DolulukYuzdesi))
ggplot(merged_park_capacity_daily, aes(date(), avd_doluluk_orani, color=ParkTipi)) +
geom_line()
